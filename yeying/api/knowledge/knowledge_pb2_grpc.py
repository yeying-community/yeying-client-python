# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from yeying.api.knowledge import knowledge_pb2 as yeying_dot_api_dot_knowledge_dot_knowledge__pb2

GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in yeying/api/knowledge/knowledge_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class KnowledgeStub(object):
    """*
    数字内容的流动采用生产、存储、服务分离的技术，也就是采归采、存归存、取归取方式。以文本内容为例，爬取内容、创作内容、分发内容、以及阅读内容，独立
    运作，只要接口版本匹配就能工作，然后以创作和阅读作为网络驱动力和激励核心因素，主要目的有两个：
    1、促进在分散式网络（web3网络中）中从新分配网络资源和流量；
    2、减少重复工作，协作保持内容新鲜度；

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Search = channel.unary_unary(
                '/yeying.api.content.Knowledge/Search',
                request_serializer=yeying_dot_api_dot_knowledge_dot_knowledge__pb2.SearchRequest.SerializeToString,
                response_deserializer=yeying_dot_api_dot_knowledge_dot_knowledge__pb2.SearchResponse.FromString,
                _registered_method=True)
        self.Append = channel.unary_unary(
                '/yeying.api.content.Knowledge/Append',
                request_serializer=yeying_dot_api_dot_knowledge_dot_knowledge__pb2.AppendRequest.SerializeToString,
                response_deserializer=yeying_dot_api_dot_knowledge_dot_knowledge__pb2.AppendResponse.FromString,
                _registered_method=True)


class KnowledgeServicer(object):
    """*
    数字内容的流动采用生产、存储、服务分离的技术，也就是采归采、存归存、取归取方式。以文本内容为例，爬取内容、创作内容、分发内容、以及阅读内容，独立
    运作，只要接口版本匹配就能工作，然后以创作和阅读作为网络驱动力和激励核心因素，主要目的有两个：
    1、促进在分散式网络（web3网络中）中从新分配网络资源和流量；
    2、减少重复工作，协作保持内容新鲜度；

    """

    def Search(self, request, context):
        """*
        内容通知
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Append(self, request, context):
        """*
        内容保鲜
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KnowledgeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Search': grpc.unary_unary_rpc_method_handler(
                    servicer.Search,
                    request_deserializer=yeying_dot_api_dot_knowledge_dot_knowledge__pb2.SearchRequest.FromString,
                    response_serializer=yeying_dot_api_dot_knowledge_dot_knowledge__pb2.SearchResponse.SerializeToString,
            ),
            'Append': grpc.unary_unary_rpc_method_handler(
                    servicer.Append,
                    request_deserializer=yeying_dot_api_dot_knowledge_dot_knowledge__pb2.AppendRequest.FromString,
                    response_serializer=yeying_dot_api_dot_knowledge_dot_knowledge__pb2.AppendResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'yeying.api.content.Knowledge', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('yeying.api.content.Knowledge', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Knowledge(object):
    """*
    数字内容的流动采用生产、存储、服务分离的技术，也就是采归采、存归存、取归取方式。以文本内容为例，爬取内容、创作内容、分发内容、以及阅读内容，独立
    运作，只要接口版本匹配就能工作，然后以创作和阅读作为网络驱动力和激励核心因素，主要目的有两个：
    1、促进在分散式网络（web3网络中）中从新分配网络资源和流量；
    2、减少重复工作，协作保持内容新鲜度；

    """

    @staticmethod
    def Search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/yeying.api.content.Knowledge/Search',
            yeying_dot_api_dot_knowledge_dot_knowledge__pb2.SearchRequest.SerializeToString,
            yeying_dot_api_dot_knowledge_dot_knowledge__pb2.SearchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Append(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/yeying.api.content.Knowledge/Append',
            yeying_dot_api_dot_knowledge_dot_knowledge__pb2.AppendRequest.SerializeToString,
            yeying_dot_api_dot_knowledge_dot_knowledge__pb2.AppendResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
